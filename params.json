{"name":"CCOAP","tagline":"CoAP implementation in C","body":"# CCOAP - CoAP implementation in C\r\n\r\nCCOAP is a CoAP implementation written in C for Linux/MacOSX. It allows quick implementation of client/server applications with the help of a simple API. CCOAP is based on [draft-ietf-core-coap-08](http://tools.ietf.org/html/draft-ietf-core-coap-08 ).\r\n\r\nCCOAP is released under [the Apache License version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html). CCOAP has been developped by Toyota InfoTechnology Center, USA, Inc. and is provided without any warranties. \r\n\r\n## Directory structure\r\n\r\nThe CCOAP project is composed of:\r\n\r\n    +--apps/\r\n    |  |\r\n    |  +--examples/\r\n    |     |\r\n    |     +--demo_commandline/\r\n    |     |   * This sample application is a commandline client\r\n    |     |     and server tool for tests purposes. The client allows \r\n    |     |     the setting of various CoAP options from the commandline\r\n    |     |     (such as message and query type, payload, etc.), which\r\n    |     |     can be useful for tests against a server. The server \r\n    |     |     replies to GET messages with a payload filled with the\r\n    |     |     current time (otherwise it just replies with an empty \r\n    |     |     payload). The server can also be configured to reply\r\n    |     |     with some delay in order to emulate lossy networks.\r\n    |     |\r\n    |     +--demo_time/\r\n    |     |   * This is a sample application that shows how to \r\n    |     |     retrieve data such as the current time by a \r\n    |     |     client from a server using CoAP.\r\n    |     |\r\n    |     +--shared/\r\n    |         * Shared coded used by the applications. \r\n    |\r\n    +--doc/\r\n    |  |\r\n    |  +--doxygen/\r\n    |  |   * Doxygen documentation for the CCOAP library API\r\n    |  |\r\n    |  +--sample_config/\r\n    |      * Sample configuration files for the CoAP client and\r\n    |        server\r\n    |\r\n    +--include/\r\n    |      * Include files for application development.\r\n    |\r\n    +--lib/\r\n    |  |\r\n    |  +--ccoap\r\n    |  |   * The ccoap library, which contains the core CoAP\r\n    |  |     functions. \r\n    |  |\r\n    |  +--ccoapapps\r\n    |      * The ccoapapps library, which contains the functions\r\n    |        for client task management (in client_tasks/) and \r\n    |        server handlers (in server_handlers/).\r\n    |\r\n    +--.cproject / .project\r\n        * Eclipse project files\r\n\r\n## How to compile and/or clean the code\r\n\r\nRetrieve the code and create a new directory for the project, at the same level than the ccoap/ directory. It will be used to build the code:\r\n\r\n    $ mkdir ccoap_build\r\n    $ cd ccoap_build/\r\n\r\nBuild the code (you can also use **Release** instead of **Debug**):\r\n\r\n    $ cmake -D CMAKE_BUILD_TYPE=Debug ../ccoap\r\n    $ make\r\n\r\nThe **Release** flag will remove most of the debug messages, but will keep error messages. Application binaries are located in the **bin/** directory. The CCOAP libraries are in the **lib/** directory.\r\n\r\nYou can install the binaries and libraries with:\r\n\r\n    # make install\r\n\r\nYou can cleanup the code with:\r\n\r\n    $ make clean\r\n\r\nNote that **.cproject** and **.project** files for Eclipse are also available in the **ccoap/** directory. \r\n\r\n\r\n## How to run a sample application\r\n\r\nFirst, you need to put the CoAP port number (5683) in your **/etc/services** file. On Linux, add the following line:\r\n\r\n    coap   udp/5683\r\n\r\nOn MacOSX (10.8) this is slightly different, you need to add:\r\n\r\n    coap   5683/udp\r\n\r\nSome sample applications are located in the **ccoap_build/bin/** directory:\r\n* **coap_client_time** / **coap_server_time** is a simple CoAP client / server application to retrieve data (here, the current time) by a client from a server.\r\n* **coap_client_commandline** / **coap_server_commandline** is a configurable CoAP client and server from the commandline. \r\n\r\nAll of these sample applications accept the **-h** option to display some help about their command line options. \r\n\r\nThey also accept the **-f** option to provide a configuration file. Sample configuration files are located in the **doc/sample_config/** directory. \r\n\r\nFor example, for the time application, on the server side, you should use:\r\n\r\n    $ ./coap_server_time -f path/to/coap_server_config \r\n\r\nOn the client side:\r\n\r\n    $ ./coap_client_time -t <0/1> \\\r\n                         -s <1-1000> \\\r\n                         -f path/to/coap_client_config\r\n\r\nThe **-t** option can be used with 0 for sending CON message, or 1 for sending NON message. The **-s** option can be used with a number between 1 and 1000 to send the corresponding number or requests (i.e. **-s 15** will send 15 requests).\r\n\r\nYou should get a detailed description of the reply including the current time sent by the server.\r\n\r\n**NOTE:** On MacOSX, if you use localhost as the server address, you need to explicitely specify **127.0.0.1** instead of **localhost** in the configuration file of the client. \r\n\r\n## Build you own client and server\r\n\r\nThere are several examples of clients and servers using the CCOAP library in the **apps/examples/** directory. You can use them as a base to start writing your own applications. The CCOAP API is documented using Doxygen, you can find the documentation in **doc/doxygen/html/**.\r\n\r\nLet's take the **apps/examples/demo_time/** application as an example. \r\n\r\n### The main server code (demo_time/server_main.c):\r\n\r\nIn the _main()_ function, the default configuration items are loaded with _coap_default_config()_.\r\n\r\nThe application type (here, COAP_ENUM_REQ_TIME) and handler (coap_req_handler_demo) for this type are registered with _coap_serv_handler_regist()_. Basically, handlers are callback functions called to process a request for a certain type of application.\r\n\r\nYour server can register multiple application types and handlers. At the moment, new application types must be manually added in the coap_req_type structure of the **lib/ccoapapps/server_handlers/handlers.h** file. \r\n\r\nThe _coap_req_handler_demo()_ handler is implemented in the **shared/server_handler.c** file that we describe later.\r\n\r\nThe server can then process the extra command line arguments (such as the one to provide the configuration file). The _coap_server_config()_ function can be called to process the configuration file given as argument. \r\n\r\nThe _coap_server_init()_ must then be called to initialize the server functions. After that, a call to the _coap_server_run()_ function starts the the main server loop. Before the server exits, _coap_server_cleanup()_ must be called. \r\n\r\n### The server handler (demo_time/server_handler.c and shared/server_handler.h):\r\n\r\nThe function called _coap_req_handler_demo()_ is a simple handler for the time application. It handles the GET messages received from the client and fill the reply with the current time.\r\n\r\nFor a slightly different handler example , you can have a look at the **demo_commandline/server_handler.c** file.\r\n\r\n### The main client code (demo_time/client_main.c):\r\n\r\nIn the _main()_ function, the default configuration items are loaded with _coap_default_config()_.\r\n\r\nThe application type (here, COAP_ENUM_USER_TIME) and task (coap_tasks_demo) for this type are registered with _coap_client_task_regist()_. Basically, tasks are callback functions called when application data that matches the request is is received by the client. \r\n\r\nAt the moment, new application types must be manually added in the _coap_user_type_ structure of the **lib/ccoapapps/client_tasks/tasks.h** file. \r\n\r\nThe _coap_tasks_demo()_ task function is implemented in the _shared/tasks_demo.c_ file that we describe later.\r\n\r\nThe client can then process the extra command line arguments (such as the one to provide the configuration file). The _coap_client_config()_ function can be called to process the configuration file given as argument. \r\n\r\nThe _coap_client_init()_ must then be called to initialize the client functions. After that, a call to the _coap_client_run()_ function starts the the main client loop. It takes as an argument a callback function (here _get_task()_, defined at the top of the file) and the data for this callback function. The data is user-defined with the definition of the task_data structure at the beginning of the file. Before the client exits, _coap_client_cleanup()_ must be called.\r\n\r\nThe _get_task()_ function defined at the top of the file is a callback function called every time the client sends an application message to the server. It must be defined by the application developper and contain the code that fills the CoAP message options and payload. In the application example, we fill the CoAP header with a URI equal to 'time' in order to ask for the '/time' data to the server. \r\n\r\n### The client tasks (shared/tasks_demo.{c;h}):\r\n\r\nThis sample tasks callback is called _coap_tasks_demo()_ and is also used by the **demo_commandline/** application. Upon reception of application messages from the server, it simply calls the _coap_dump_msg()_ to display the received message, and dump the payload with _coap_dump_payload()_.\r\n\r\n### Some more useful functions\r\n\r\nYou can find all of the API in the **include/ccoaplib.h** file that you should include in your application files. \r\n\r\nSome useful macros for debug can be used in your application developments. You can use them similarly as the _printf()_ function:\r\n* **DBG()**: prints your debug message preprended with the function name. The macro is disabled when the code is compiled in **Release** mode.\r\n* **CDBG()**: similar to DBG() except that the debug message is not prepended with the function name\r\n* **ERROR()**: similar to DBG() except that the macro is never disabled, even in **Release** mode. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}